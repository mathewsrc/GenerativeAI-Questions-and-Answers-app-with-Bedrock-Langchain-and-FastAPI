# This workflow installs the latest version of Terraform CLI and configures the Terraform CLI configuration file
# with an API token for Terraform Cloud (app.terraform.io). On pull request events, this workflow will run
# `terraform init`, `terraform fmt`, and `terraform plan` (speculative plan via Terraform Cloud). On push events
# to the "main" branch, `terraform apply` will be executed.
#
# Documentation for `hashicorp/setup-terraform` is located here: https://github.com/hashicorp/setup-terraform
#
# To use this workflow, you will need to complete the following setup steps.
#
# 1. Create a `main.tf` file in the root of this repository with the `remote` backend and one or more resources defined.
#   Example `main.tf`:
#     # The configuration for the `remote` backend.
#     terraform {
#       backend "remote" {
#         # The name of your Terraform Cloud organization.
#         organization = "example-organization"
#
#         # The name of the Terraform Cloud workspace to store Terraform state files in.
#         workspaces {
#           name = "example-workspace"
#         }
#       }
#     }
#
#     # An example resource that does nothing.
#     resource "null_resource" "example" {
#       triggers = {
#         value = "A example resource that does nothing!"
#       }
#     }
#
#
# 2. Generate a Terraform Cloud user API token and store it as a GitHub secret (e.g. TF_API_TOKEN) on this repository.
#   Documentation:
#     - https://www.terraform.io/docs/cloud/users-teams-organizations/api-tokens.html
#     - https://help.github.com/en/actions/configuring-and-managing-workflows/creating-and-storing-encrypted-secrets
#
# 3. Reference the GitHub secret in step using the `hashicorp/setup-terraform` GitHub Action.
#   Example:
#     - name: Setup Terraform
#       uses: hashicorp/setup-terraform@v1
#       with:
#         cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}

name: 'Deploy'

# Manual trigger
#on:
#  workflow_dispatch:

# Trigger on CI workflow completion
on:
  workflow_run:
    workflows: ["CI ###"]
    types:
      - completed

env:
  AWS_REGION: us-east-1                  # set this to your preferred AWS region, e.g. us-west-1
  ECR_REPOSITORY: bedrock-qa-rag-ecr-tf           # set this to your Amazon ECR repository name
  ECS_SERVICE: bedrock-qa-rag-service-tf                # set this to your Amazon ECS service name
  ECS_CLUSTER: bedrock-qa-rag-cluster-tf                 # set this to your Amazon ECS cluster name
  ECS_TASK_DEFINITION: .aws/task-definition-actions.json # set this to the path to your Amazon ECS task definition file, e.g. .aws/task-definition.json
  CONTAINER_NAME: bedrock-qa-rag-service-tf          # set this to the name of the container in the containerDefinitions section of your task definition
  LOGS_GROUP_NAME: bedrock
  ECS_TASK_FAMILY_NAME: bedrock-qa-rag-task-tf
  ECS_EXECUTION_ROLE_NAME: bedrock-qa-rag-ecs-execution-role-tf
  ECS_TASK_ROLE_NAME: bedrock-qa-rag-ecs-task-role-tf

permissions:
  contents: read

jobs:
  terraform:
      name: 'Terraform (IaC)'
      runs-on: ubuntu-latest
      environment: production

      defaults:
        run:
          shell: bash
      
      if: ${{ github.event.workflow_run.conclusion == 'success' }}
      steps:
      # Checkout the repository to the GitHub Actions runner
      - name: Checkout
        uses: actions/checkout@v3

      # Configure AWS credentials for the AWS CLI
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      # Install the latest version of Terraform CLI and configure the Terraform CLI configuration file with a Terraform Cloud user API token
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}

      # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
      - name: Terraform Init
        run: make tf-init

      # Checks that all Terraform configuration files adhere to a canonical format
      - name: Terraform Format
        run: make tf-fmt

      # Generates an execution plan for Terraform
      - name: Terraform Plan
        run: make tf-plan

        # On push to "main", build or change infrastructure according to Terraform configuration files
        # Note: It is recommended to set up a required "strict" status check in your repository for "Terraform Cloud". See the documentation on "strict" required status checks for more information: https://help.github.com/en/github/administering-a-repository/types-of-required-status-checks
      - name: Terraform Apply
        # if: github.ref == 'refs/heads/"main"' && github.event_name == 'push'
        run: make tf-apply

        # This workflow will build and push a new container image to Amazon ECR,
# and then will deploy a new task definition to Amazon ECS, when there is a push to the "main" branch.
#
# To use this workflow, you will need to complete the following set-up steps:
#
# 1. Create an ECR repository to store your images.
#    For example: `aws ecr create-repository --repository-name my-ecr-repo --region us-east-2`.
#    Replace the value of the `ECR_REPOSITORY` environment variable in the workflow below with your repository's name.
#    Replace the value of the `AWS_REGION` environment variable in the workflow below with your repository's region.
#
# 2. Create an ECS task definition, an ECS cluster, and an ECS service.
#    For example, follow the Getting Started guide on the ECS console:
#      https://us-east-2.console.aws.amazon.com/ecs/home?region=us-east-2#/firstRun
#    Replace the value of the `ECS_SERVICE` environment variable in the workflow below with the name you set for the Amazon ECS service.
#    Replace the value of the `ECS_CLUSTER` environment variable in the workflow below with the name you set for the cluster.
#
# 3. Store your ECS task definition as a JSON file in your repository.
#    The format should follow the output of `aws ecs register-task-definition --generate-cli-skeleton`.
#    Replace the value of the `ECS_TASK_DEFINITION` environment variable in the workflow below with the path to the JSON file.
#    Replace the value of the `CONTAINER_NAME` environment variable in the workflow below with the name of the container
#    in the `containerDefinitions` section of the task definition.
#
# 4. Store an IAM user access key in GitHub Actions secrets named `AWS_ACCESS_KEY_ID` and `AWS_SECRET_ACCESS_KEY`.
#    See the documentation for each action used below for the recommended IAM policies for this IAM user,
#    and best practices on handling the access key credentials.

  deploy:
    name: Deploy (Amazon ECS)
    runs-on: ubuntu-latest
    environment: production

    if: ${{ github.event.workflow_run.conclusion == 'success' }}
    steps:
    - name: Checkout
      uses: actions/checkout@v3

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: Build, tag, and push image to Amazon ECR
      id: build-image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: ${{ github.sha }}
      run: |
        # Build a docker container and
        # push it to ECR so that it can
        # be deployed to ECS.
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT
    
    - name: Upload Qdrant secrets to AWS Secrets Manager
      env:
        QDRANT_URL: ${{ secrets.QDRANT_URL }}
        QDRANT_API_KEY: ${{ secrets.QDRANT_API_KEY }}
      run: |
          aws secretsmanager put-secret-value --secret-id prod/qdrant_url --secret-string $QDRANT_URL
          aws secretsmanager put-secret-value --secret-id prod/qdrant_api_key --secret-string $QDRANT_API_KEY

    - name: Pass values to .aws/task-definition-actions.json placeholders
      env:
        image: ${{ steps.build-image.outputs.image }}
        comtainer_name: ${{ env.CONTAINER_NAME }}
        region: ${{ env.AWS_REGION }}
        ecr_repository: ${{ env.ECR_REPOSITORY }}
        account_id: ${{ secrets.AWS_ACCOUNT_ID }}
        logs_group_name: ${{ env.LOGS_GROUP_NAME }}
        ecs_task_family_name: ${{ env.ECS_TASK_FAMILY_NAME }}
        ecs_execution_role_name: ${{ env.ECS_EXECUTION_ROLE_NAME }}
        ecs_task_role_name: ${{ env.ECS_TASK_ROLE_NAME }}
      run: |
        sed -i "s|{tag}|$image|g" .aws/task-definition-actions.json
        sed -i "s|{name}|$comtainer_name|g" .aws/task-definition-actions.json
        sed -i "s|{region}|$region|g" .aws/task-definition-actions.json
        sed -i "s|{ecr}|$ecr_repository|g" .aws/task-definition-actions.json
        sed -i "s|{account_id}|$account_id|g" .aws/task-definition-actions.json
        sed -i "s|{logs_group_name}|$logs_group_name|g" .aws/task-definition-actions.json
        sed -i "s|{ecs_task_family_name}|$ecs_task_family_name|g" .aws/task-definition-actions.json
        sed -i "s|{ecs_execution_role_name}|$ecs_execution_role_name|g" .aws/task-definition-actions.json
        sed -i "s|{ecs_task_role_name}|$ecs_task_role_name|g" .aws/task-definition-actions.json

    - name: Fill in the new image ID in the Amazon ECS task definition
      id: task-def
      uses: aws-actions/amazon-ecs-render-task-definition@v1
      with:
        task-definition: ${{ env.ECS_TASK_DEFINITION }}
        container-name: ${{ env.CONTAINER_NAME }}
        image: ${{ steps.build-image.outputs.image }}

    - name: Deploy Amazon ECS task definition
      uses: aws-actions/amazon-ecs-deploy-task-definition@v1
      with:
        task-definition: ${{ steps.task-def.outputs.task-definition }}
        service: ${{ env.ECS_SERVICE }}
        cluster: ${{ env.ECS_CLUSTER }}
        wait-for-service-stability: true